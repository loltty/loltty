┌─────────────┐
│ Development │
└─────────────┘

Notes to the developer:
- drop ccc (redefine colour), initc (set colour to rgb value)
- colors@, pairs@, setab@, setaf@, setb@, setf@
- last column on last line: write on second-to-last, then issue
  \b\e[@ to move it right, then write the real value for that column
  (use \b\b\e[2@ if its wcwidth() is 2); always issue an absolute⚠
  positioning command after writing to the last column (in any line)
- framebuffer: array[lines][cols] of union { pointer, inline} plus
  array[lines][cols] of uint8_t attributes (haspointer, numinline,
  intensive, underline, reverse), plus one for colours (type r g b)?
  probably, since fb must represent outer tty not inner pty
- redrawing: all vs changed? (another array? ugh…); scrolling…

Rough design plan:

- a number of “filter”s, order and settings configurable at runtime,
  set up a “filter chain” for the input; each can hook up several things:
  * filters should ideally be in a tree (or graph?), e.g. only apply part
    of a filter chain to:
    * a rectangle
    * everything below the first bold line
    * everything below the first red line
    * everything to the second bold line
    * the form of cowsay or arbitrary return regions of other filters, e.g.
      cowsay, sl, etc
  • when a new char is to be inserted
  • display offset +(x, y) and size -(x, y)
  • timeout, for handlers (e.g. lolcolours animation)
- have a child process (group, session leader?) on a pty/tty pair
- get input from it in a select loop (with timeout)
  ‣ also listen on own tty, forward keypresses
  ‣ on timeout call the various handlers from the hooks, in order
  ‣ handle SIGWINCH, pass (reduced) tty size to child (and signal it)
- parse input for escape sequence OR input char
  ‣ escape sequence modifies state (current location and attributes)
  ‣ pass input char, together with state info, to filter chain
  ‣ … then write to framebuffer and “dirty” affected chars
- redraw dirty content (clear screen redraws all)
  • somehow handle framing from filters (like cowsay bordure)
- we need to tell child about own capabilities (termcap, terminfo)

Let’s begin with a nonlol-tty: fixed 1char border, fixed “chain”,
no fancy processing, initially not even window size or terminfo.

Possibly: one framebuffer per filter, as only the “child” “filter”
needs to do escape codes and “current state info” really. Allows
for more flexibility in chain (they all handle only redraw (full
or partial) and timeout) and the “what’s the char under my cursor?”
functionality to work in children, plus eventually multiple children
like https://www.mirbsd.org/man1/window does.

Ideas for filters:
• 1ch border with title
• cowsay border (optionally animated: the cow can walk)
• lolcat, static colours
• lolcat, animated colours
• matrix (bold chars fall down, change char code at that)
• reverse/flip content, colours, …
• render text on parent fb using figlet/toilet
• background image (e.g. with libcaca)
• transparency (empty cells let background shine through)
  ‣ especially useful with multiple windows
  ‣ what shines through is reduced in colour
• “arrange” plugin, arrange multiple clients/windows
• widgets (like a clock) that are not really client processes
• etc…

Other effects (think 'messing with people using this machine'):
* User detection
* Date/time detection
* Custom/random/random with offset timing for effects
* SIGUSR1 to (re)load config
* SIGUSR2 to become normal
